### Replit Agent Prompt: SmartFlow Starter Pack (Flask)

**What this project does (1–2 lines)**
A minimal Flask website for SmartFlow Systems with a homepage, basic branding, config-driven settings, and a tiny lead-capture API that saves to `data.csv`. It’s ready to extend with booking, payments, or admin tools.

**Files required & where they go**
- `app.py` (root) — Flask server.
- `requirements.txt` (root) — Python deps.
- `.env` (root) — secrets (Replit auto-loads).
- `index.html` (root) — homepage.
- `style.css` (root) — styles.
- `script.js` (root) — frontend logic.
- `site.config.json` (root) — site name/links.
- `admin.html` (root) — simple leads viewer.
- `data.csv` (root) — lead storage (created if missing).
- `robots.txt` (root), `sitemap.xml` (root) — SEO helpers.
- `assets/` (folder) — images & downloads (placeholders provided).

**Setup needed (packages)**
- Python: `flask` (auto-installed by Replit from `requirements.txt`).

**How to run in Replit**
- Default command: `python3 app.py`
- Open the webview URL when it boots (you’ll see the SmartFlow homepage).

────────────────────────────────────────────────────────────────────────

# =========================================
# File: app.py
# =========================================
from __future__ import annotations
from flask import Flask, send_from_directory, jsonify, request, Response
from pathlib import Path
from datetime import timedelta
import csv, json, os

BASE = Path(__file__).parent.resolve()
app = Flask(__name__, static_url_path="", static_folder=str(BASE))

def load_json(path: Path, fallback=None):
    try:
        with path.open("r", encoding="utf-8") as f:
            return json.load(f)
    except Exception:
        return fallback

def ensure_csv(path: Path):
    if not path.exists():
        path.write_text("timestamp,name,email,message\n", encoding="utf-8")

@app.after_request
def add_headers(resp: Response):
    # Cache: HTML no-cache, assets 7 days
    if resp.mimetype == "text/html":
        resp.cache_control.no_cache = True
    else:
        resp.cache_control.public = True
        resp.cache_control.max_age = int(timedelta(days=7).total_seconds())
    # Basic CORS for simple demos
    resp.headers.setdefault("Access-Control-Allow-Origin", "*")
    resp.headers.setdefault("Access-Control-Allow-Headers", "Content-Type")
    return resp

@app.route("/")
def index():
    return send_from_directory(BASE, "index.html")

@app.get("/health")
def health():
    cfg = load_json(BASE / "site.config.json", {})
    return jsonify({"ok": True, "configLoaded": bool(cfg)})

@app.get("/api/config")
def api_config():
    cfg = load_json(BASE / "site.config.json", {})
    return jsonify(cfg or {})

@app.post("/api/lead")
def api_lead():
    data = request.get_json(silent=True) or {}
    name = (data.get("name") or "").strip()
    email = (data.get("email") or "").strip()
    message = (data.get("message") or "").strip()
    if not name or not email:
        return jsonify({"ok": False, "error": "name and email are required"}), 400

    leads_path = BASE / "data.csv"
    ensure_csv(leads_path)
    with leads_path.open("a", encoding="utf-8", newline="") as f:
        w = csv.writer(f)
        from datetime import datetime
        w.writerow([datetime.utcnow().isoformat(), name, email, message])

    return jsonify({"ok": True, "saved": True})

@app.get("/api/leads")
def api_leads():
    leads_path = BASE / "data.csv"
    ensure_csv(leads_path)
    rows = []
    with leads_path.open("r", encoding="utf-8") as f:
        r = csv.DictReader(f)
        rows = list(r)
    return jsonify({"ok": True, "rows": rows})

if __name__ == "__main__":
    port = int(os.getenv("PORT", "3000"))
    app.run(host="0.0.0.0", port=port, debug=False)

# =========================================
# File: requirements.txt
# =========================================
flask

# =========================================
# File: .env
# (Replit auto-loads this; edit values in Replit > Secrets UI)
# =========================================
ADMIN_USER=admin
ADMIN_PASSWORD=supersecret

# =========================================
# File: site.config.json
# =========================================
{
  "siteName": "SmartFlow Systems",
  "siteUrl": "https://your-replit-url.example",
  "tagline": "Smooth • Street‑Smart • Futuristic",
  "calendlyUrl": "https://calendly.com/your-handle/30min",
  "leadMagnetUrl": "assets/lead-magnet.pdf"
}

# =========================================
# File: index.html
# =========================================
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>SmartFlow Systems</title>
  <link rel="stylesheet" href="style.css" />
  <meta name="description" content="SmartFlow Systems — AI bots, booking, and e‑commerce that make money while you sleep." />
</head>
<body>
  <header class="hero">
    <img src="assets/logo.png" alt="SmartFlow Logo" class="logo" />
    <h1 id="siteName">SmartFlow Systems</h1>
    <p id="tagline" class="tagline">Smooth • Street‑Smart • Futuristic</p>
    <div class="cta-row">
      <a id="bookLink" class="btn" target="_blank" rel="noopener">Book a Demo</a>
      <a id="leadMagnet" class="btn ghost" target="_blank" rel="noopener">Download Guide</a>
    </div>
  </header>

  <main class="container">
    <section class="card">
      <h2>What’s inside</h2>
      <ul>
        <li>Config‑driven setup (<code>site.config.json</code>)</li>
        <li>Lead capture API (<code>/api/lead</code> → saves to <code>data.csv</code>)</li>
        <li>Admin preview (<a href="admin.html">/admin.html</a>)</li>
      </ul>
    </section>

    <section class="card">
      <h2>Get in touch</h2>
      <form id="leadForm">
        <label>Name <input type="text" name="name" required /></label>
        <label>Email <input type="email" name="email" required /></label>
        <label>Message <textarea name="message" rows="3" placeholder="Tell us what you need…"></textarea></label>
        <button type="submit" class="btn">Send</button>
        <p id="leadStatus" class="status"></p>
      </form>
    </section>
  </main>

  <footer class="footer">
    <small>&copy; <span id="year"></span> SmartFlow Systems</small>
  </footer>

  <script src="script.js"></script>
</body>
</html>

# =========================================
# File: style.css
# =========================================
:root{
  --bg:#0a0a0a; --fg:#f5f5f5; --gold:#d4af37; --muted:#9aa0a6; --card:#121212;
}
*{box-sizing:border-box}
body{margin:0;font-family:system-ui,-apple-system,Segoe UI,Roboto,Arial,sans-serif;background:var(--bg);color:var(--fg)}
.hero{padding:56px 20px;text-align:center;border-bottom:1px solid #1f1f1f}
.logo{width:72px;height:72px;object-fit:contain;filter:drop-shadow(0 0 12px rgba(212,175,55,.2))}
h1{font-size:2.2rem;margin:.5rem 0;color:var(--fg)}
.tagline{color:var(--muted);margin:0 0 1rem}
.btn{display:inline-block;background:var(--gold);color:#000;padding:.8rem 1.1rem;border-radius:12px;text-decoration:none;font-weight:700}
.btn.ghost{background:transparent;color:var(--gold);border:1px solid var(--gold)}
.cta-row{display:flex;gap:.8rem;justify-content:center;align-items:center;flex-wrap:wrap}
.container{max-width:960px;margin:24px auto;padding:0 16px}
.card{background:var(--card);padding:16px 16px;border:1px solid #1f1f1f;border-radius:14px;margin:16px 0}
label{display:block;margin:.6rem 0;color:var(--muted)}
input,textarea{width:100%;padding:.7rem;border-radius:10px;border:1px solid #2a2a2a;background:#0e0e0e;color:var(--fg)}
button.btn{border:0;cursor:pointer}
.status{min-height:1.3rem;margin-top:.5rem;color:var(--gold)}
.footer{padding:24px;text-align:center;color:var(--muted);border-top:1px solid #1f1f1f}

# =========================================
# File: script.js
# =========================================
async function loadConfig(){
  try{
    const res = await fetch("/api/config");
    const cfg = await res.json();
    document.getElementById("siteName").textContent = cfg.siteName || "SmartFlow Systems";
    document.getElementById("tagline").textContent = cfg.tagline || "";
    if (cfg.calendlyUrl) {
      const a = document.getElementById("bookLink");
      a.href = cfg.calendlyUrl;
      a.textContent = "Book a Demo";
    }
    if (cfg.leadMagnetUrl) {
      const g = document.getElementById("leadMagnet");
      g.href = cfg.leadMagnetUrl;
      g.textContent = "Download Guide";
    }
  }catch(e){console.warn("Config load failed", e);}
}
async function submitLead(evt){
  evt.preventDefault();
  const form = evt.target;
  const status = document.getElementById("leadStatus");
  status.textContent = "Sending…";
  const payload = {
    name: form.name.value.trim(),
    email: form.email.value.trim(),
    message: form.message.value.trim()
  };
  try{
    const res = await fetch("/api/lead", {
      method: "POST",
      headers: {"Content-Type":"application/json"},
      body: JSON.stringify(payload)
    });
    const data = await res.json();
    if (data.ok) {
      status.textContent = "Thanks! We’ll be in touch.";
      form.reset();
    } else {
      status.textContent = data.error || "Something went wrong.";
    }
  }catch(e){
    status.textContent = "Network error.";
  }
}
document.getElementById("leadForm").addEventListener("submit", submitLead);
document.getElementById("year").textContent = new Date().getFullYear();
loadConfig();

# =========================================
# File: admin.html
# =========================================
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>SmartFlow Admin</title>
  <link rel="stylesheet" href="style.css" />
</head>
<body>
  <main class="container">
    <section class="card">
      <h1>Leads</h1>
      <p class="tagline">Viewing <code>data.csv</code> via <code>/api/leads</code></p>
      <div id="leads"></div>
    </section>
  </main>
  <script>
    async function loadLeads(){
      const res = await fetch("/api/leads");
      const data = await res.json();
      const box = document.getElementById("leads");
      if (!data.ok) { box.textContent = "Failed to load."; return; }
      if (!data.rows.length) { box.textContent = "No leads yet."; return; }
      const table = document.createElement("table");
      table.style.width = "100%";
      table.style.borderCollapse = "collapse";
      const thead = document.createElement("thead");
      thead.innerHTML = "<tr><th>Time (UTC)</th><th>Name</th><th>Email</th><th>Message</th></tr>";
      table.appendChild(thead);
      const tbody = document.createElement("tbody");
      data.rows.forEach(r=>{
        const tr = document.createElement("tr");
        tr.innerHTML = `<td>${r.timestamp||""}</td><td>${r.name||""}</td><td>${r.email||""}</td><td>${r.message||""}</td>`;
        [...tr.children].forEach(td=>{td.style.borderBottom="1px solid #1f1f1f"; td.style.padding="8px";});
        tbody.appendChild(tr);
      });
      table.appendChild(tbody);
      box.appendChild(table);
    }
    loadLeads();
  </script>
</body>
</html>

# =========================================
# File: data.csv
# (Created automatically if missing, header shown for clarity)
# =========================================
timestamp,name,email,message

# =========================================
# File: robots.txt
# =========================================
User-agent: *
Allow: /

Sitemap: /sitemap.xml

# =========================================
# File: sitemap.xml
# =========================================
<?xml version="1.0" encoding="UTF-8"?>
<urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">
  <url><loc>/</loc></url>
  <url><loc>/admin.html</loc></url>
</urlset>

# =========================================
# Folder: assets/
# (Placeholders so the site has something to link to)
# =========================================
# File: assets/README.txt
Put your images and downloads in this folder.
- logo.png  (site logo)
- banner.jpg (optional hero banner)
- lead-magnet.pdf (your downloadable guide)

# =========================================
# OPTIONAL: Replit .replit (if you want to force run command)
# (Replit usually detects Python; include only if needed)
# =========================================
# run = "python3 app.py"
