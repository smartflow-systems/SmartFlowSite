# =====================
# ONE-SHOT PATCH BUNDLE
# Paste the following files into your repo at the exact paths shown,
# commit, push, and redeploy on Replit Deployments.
# =====================

# ---------------------
# .replit
# ---------------------
run = "python3 -m gunicorn app:app --bind 0.0.0.0:$PORT --workers 2 --threads 4 --timeout 120"
language = "python3"

[env]
PYTHONUNBUFFERED = "1"
PORT = "5000"

# ---------------------
# replit.toml
# ---------------------
entrypoint = "app.py"

[env]
PYTHONUNBUFFERED = "1"
PORT = "5000"

[interpreter]
type = "python3"

[deployment]
run = [
  "python3","-m","gunicorn","app:app",
  "--bind","0.0.0.0:$PORT","--workers","2","--threads","4","--timeout","120"
]

# ---------------------
# requirements.txt
# ---------------------
Flask>=3.0.0,<4
gunicorn>=21.2
pytest>=8

# ---------------------
# Procfile  (optional for other hosts)
# ---------------------
web: python3 -m gunicorn app:app --bind 0.0.0.0:$PORT --workers 2 --threads 4 --timeout 120

# ---------------------
# app.py
# ---------------------
from __future__ import annotations
from flask import Flask, send_from_directory, jsonify, request, Response, abort
from pathlib import Path
from datetime import timedelta
from email.message import EmailMessage
import os, json, base64, csv, io, smtplib

BASE = Path(__file__).parent.resolve()
app = Flask(__name__, static_url_path="", static_folder=str(BASE))

# --- utils ---

def load_json(path: Path, fallback=None):
    try:
        with path.open("r", encoding="utf-8") as f:
            return json.load(f)
    except Exception:
        return fallback


def _basic_auth_ok(req) -> bool:
    user_env = os.getenv("ADMIN_USER", "admin")
    pass_env = os.getenv("ADMIN_PASSWORD", "")
    if not pass_env:
        return False
    auth = req.headers.get("Authorization", "")
    if not auth.startswith("Basic "):
        return False
    try:
        raw = base64.b64decode(auth.split(" ", 1)[1]).decode("utf-8")
        user, pwd = raw.split(":", 1)
        return (user == user_env) and (pwd == pass_env)
    except Exception:
        return False


def _require_admin():
    return Response("Auth required", 401, {"WWW-Authenticate": 'Basic realm="SmartFlow Admin"'})


# --- caching ---
@app.after_request
def add_caching(resp):
    if resp.mimetype == "text/html":
        resp.cache_control.no_cache = True
    else:
        resp.cache_control.public = True
        resp.cache_control.max_age = int(timedelta(days=7).total_seconds())
    resp.headers.setdefault("Access-Control-Allow-Origin", "*")
    return resp


# --- routes ---
@app.get("/")
def root():
    idx = BASE / "index.html"
    if idx.exists():
        return send_from_directory(BASE, "index.html")
    return Response("OK", 200, {"Content-Type": "text/plain; charset=utf-8"})


@app.get("/health")
def health():
    return jsonify({"ok": True})


@app.get("/status")
def status():
    exists = {f: (BASE / f).exists() for f in [
        "index.html","styles.css","app.js","site.config.json","pricing.json"
    ]}
    return jsonify({
        "ok": True,
        "cwd": str(BASE),
        "port_env": os.getenv("PORT"),
        "files": exists
    })


@app.route("/data/<path:name>")
def data_files(name: str):
    p = BASE / "data" / name
    if not p.exists():
        abort(404)
    return send_from_directory(p.parent, p.name)


@app.post("/lead")
def lead():
    payload = request.get_json(silent=True) or {}
    name = str(payload.get("name", "")).strip()
    email = str(payload.get("email", "")).strip()
    if not name or "@" not in email:
        return jsonify({"ok": False, "error": "invalid"}), 400

    payload.setdefault("ts", __import__("datetime").datetime.utcnow().isoformat(timespec="seconds") + "Z")

    out = BASE / "data" / "leads.jsonl"
    out.parent.mkdir(exist_ok=True)
    with out.open("a", encoding="utf-8") as f:
        f.write(json.dumps(payload, ensure_ascii=False) + "\n")

    host = os.getenv("SMTP_HOST", "")
    to_addr = os.getenv("SMTP_TO", "")
    if host and to_addr:
        try:
            msg = EmailMessage()
            msg["Subject"] = f"New Lead: {name} ({payload.get('plan') or 'undecided'})"
            msg["From"] = os.getenv("SMTP_FROM", to_addr)
            msg["To"] = to_addr
            body = "\n".join(
                f"{k}: {payload.get(k,'')}" for k in ("name","email","business","plan","goal","page","ts")
            )
            msg.set_content(body)
            port = int(os.getenv("SMTP_PORT", "587"))
            user = os.getenv("SMTP_USER", "")
            pwd = os.getenv("SMTP_PASS", "")
            with smtplib.SMTP(host, port, timeout=10) as s:
                s.starttls()
                if user and pwd:
                    s.login(user, pwd)
                s.send_message(msg)
        except Exception:
            pass

    return jsonify({"ok": True})


@app.get("/admin/leads")
def admin_leads():
    if not _basic_auth_ok(request):
        return _require_admin()

    src = BASE / "data" / "leads.jsonl"
    leads = []
    if src.exists():
        with src.open("r", encoding="utf-8") as f:
            for line in f:
                try:
                    leads.append(json.loads(line))
                except Exception:
                    continue
    leads.sort(key=lambda x: x.get("ts",""), reverse=True)

    rows = "\n".join(
        f"<tr><td>{i+1}</td><td>{l.get('ts','')}</td><td>{l.get('name','')}</td>"
        f"<td>{l.get('email','')}</td><td>{l.get('business','')}</td>"
        f"<td>{l.get('plan','')}</td><td>{(l.get('goal','') or '')[:120]}</td>"
        f"<td><a href='{l.get('page','')}' target='_blank' rel='noopener'>link</a></td></tr>"
        for i,l in enumerate(leads)
    )

    html = f"""<!doctype html><html><head><meta charset='utf-8'/><meta name='viewport' content='width=device-width,initial-scale=1'/>
    <title>Leads — Admin</title><link rel='stylesheet' href='/styles.css'/><style>
    table{{width:100%;border-collapse:collapse}}th,td{{border:1px solid #2b2722;padding:8px;text-align:left}}
    thead th{{background:#14110f}}.wrap{{width:min(1200px,92%);margin:20px auto}}
    </style></head><body><div class='wrap'><h1>Leads ({len(leads)})</h1>
    <p><a class='btn btn-gold' href='/admin/leads.csv'>Download CSV</a></p>
    <table><thead><tr><th>#</th><th>ts</th><th>name</th><th>email</th><th>business</th><th>plan</th><th>goal</th><th>page</th></tr></thead>
    <tbody>{rows or '<tr><td colspan=8>No leads yet.</td></tr>'}</tbody></table></div></body></html>"""
    return Response(html, 200, {"Content-Type":"text/html; charset=utf-8"})


@app.get("/admin/leads.csv")
def admin_leads_csv():
    if not _basic_auth_ok(request):
        return _require_admin()

    src = BASE / "data" / "leads.jsonl"
    leads = []
    if src.exists():
        with src.open("r", encoding="utf-8") as f:
            for line in f:
                try:
                    leads.append(json.loads(line))
                except Exception:
                    continue

    buf = io.StringIO()
    fields = ["ts","name","email","business","plan","goal","page"]
    w = csv.DictWriter(buf, fieldnames=fields); w.writeheader()
    for l in leads: w.writerow({k:l.get(k,"") for k in fields})

    return Response(buf.getvalue(), 200, {
        "Content-Type":"text/csv; charset=utf-8",
        "Content-Disposition":"attachment; filename=leads.csv"
    })


@app.route("/<path:path>")
def static_proxy(path: str):
    return send_from_directory(BASE, path)


if __name__ == "__main__":
    port = int(os.environ.get("PORT", "5000"))
    app.run(host="0.0.0.0", port=port, debug=False)


# ---------------------
# site.config.json
# ---------------------
{
  "siteUrl": "https://your-domain.com",
  "siteName": "SmartFlow Systems",
  "calendlyUrl": "https://calendly.com/your-handle/30min",
  "leadWebhook": "",
  "leadMagnetUrl": "assets/lead-magnet-smartflow.pdf"
}

# ---------------------
# pricing.json
# ---------------------
{
  "plans": [
    {"id":"starter","name":"Starter","subtitle":"Launch fast","price":"£499","period":"one‑time","features":["One‑page website (black+gold)","Basic SEO + speed pass","Booking or Lead form","1 revision round"]},
    {"id":"pro","name":"Pro","subtitle":"Grow with automation","price":"£1,499","period":"one‑time","popular":true,"features":["AI DM Bot (1 channel) + flows","Smart Booking (+ deposits)","3‑page website + copy","2 revision rounds"]},
    {"id":"premium","name":"Premium","subtitle":"Scale & sell","price":"£2,999","period":"one‑time","features":["Ecom funnel or full shop","AI DM Bot (2 channels)","Conversion site (5‑7 pages)","1 month optimization"]}
  ]
}

# ---------------------
# index.html  (premium theme)
# ---------------------
<!DOCTYPE html><html lang="en"><head>
<meta charset="utf-8"/><meta name="viewport" content="width=device-width,initial-scale=1"/>
<title>SmartFlow Systems — AI that books, sells & scales</title>
<meta name="description" content="AI bots + booking + ecom + websites — set up in days, not months."/>
<link rel="icon" href="static-logo.png"/>
<link rel="preload" href="styles.css" as="style"/>
<link rel="stylesheet" href="styles.css"/>
</head><body>
<a class="skiplink" href="#main">Skip to content</a>
<header class="site-header container" role="banner">
  <div class="brand"><img src="static-logo.png" alt="SmartFlow Systems" class="logo"/>
  <span class="brand-name" aria-hidden="true">SmartFlow</span></div>
  <button class="nav-toggle" aria-expanded="false" aria-controls="site-nav" aria-label="Open menu"><span class="bar"></span><span class="bar"></span><span class="bar"></span></button>
  <nav id="site-nav" class="nav" role="navigation">
    <a href="#projects">Projects</a><a href="#latest">Latest</a><a href="pricing.html">Pricing</a><a href="book.html" class="btn btn-gold">Book a Call</a>
  </nav>
</header>
<main id="main">
  <section class="hero container">
    <h1>Book more. Sell more. <span class="gold">On autopilot.</span></h1>
    <p class="sub">AI bots + booking + ecom + websites — set up in days, not months.</p>
    <div class="hero-cta"><a href="book.html" class="btn btn-gold btn-lg">Get a 30‑min Strategy Call</a>
    <a href="case-study.html" class="btn btn-ghost">See a quick case study</a></div>
    <p class="trust">Trusted by barbers, salons, & creators.</p>
  </section>
  <section id="projects" class="section container"><h2 class="section-title">Systems that make money while you sleep</h2>
    <div class="projects-grid reveal">
      <article class="project-card"><div class="tag">AI Bot</div><h3>AI Social Bot</h3>
        <ul class="feature-list"><li>Auto‑captions + niche hashtags</li><li>DM funnels & lead capture</li><li>Content calendar presets</li></ul>
        <div class="actions"><a class="btn btn-gold" href="projects/ai-bot.html">See capabilities</a>
        <a class="btn btn-ghost" href="https://github.com/boweazy/SocialScaleBoosterAIbot.git">View code</a></div>
      </article>
      <article class="project-card"><div class="tag">Booking</div><h3>Smart Booking</h3>
        <ul class="feature-list"><li>Stripe deposits + reminders</li><li>Google Calendar sync</li><li>No‑show reduction flows</li></ul>
        <div class="actions"><a class="btn btn-gold" href="projects/booking.html">Live demo</a><a class="btn btn-ghost" href="book.html">Set up yours</a></div>
      </article>
      <article class="project-card"><div class="tag">Ecom</div><h3>Smart Shops</h3>
        <ul class="feature-list"><li>One‑product funnels or full stores</li><li>Abandoned cart recovery</li><li>Upsells + analytics</li></ul>
        <div class="actions"><a class="btn btn-gold" href="case-study.html">See a store</a><a class="btn btn-ghost" href="contact.html">Enquire</a></div>
      </article>
      <article class="project-card"><div class="tag">Web</div><h3>Conversion Websites</h3>
        <ul class="feature-list"><li>Premium black + gold brand</li><li>SEO + speed optimised</li><li>Copy done for you</li></ul>
        <div class="actions"><a class="btn btn-gold" href="contact.html">Start today</a><a class="btn btn-ghost" href="case-study.html">See examples</a></div>
      </article>
    </div>
  </section>
  <section id="latest" class="section container"><h2 class="section-title">Latest from SmartFlow</h2>
    <div id="latest-cards" class="latest-grid reveal" aria-live="polite"></div>
  </section>
  <section class="section container pricing-cta"><h2 class="section-title">Ready to launch?</h2>
    <p>Pick a plan or jump on a call — we’ll map it and build it.</p>
    <div class="cta-row"><a class="btn btn-gold btn-lg" href="pricing.html">See pricing</a>
    <a class="btn btn-ghost btn-lg" href="book.html">Book a call</a></div>
  </section>
</main>
<footer class="site-footer container" role="contentinfo">
  <small>© <span id="y"></span> SmartFlow Systems.</small>
  <div class="footer-links"><a class="link" href="privacy.html">Privacy</a><a class="link" href="terms.html">Terms</a></div>
</footer>
<script src="app.js" defer></script>
</body></html>

# ---------------------
# pricing.html
# ---------------------
<!DOCTYPE html><html lang="en"><head>
<meta charset="utf-8"/><meta name="viewport" content="width=device-width,initial-scale=1"/>
<title>Pricing — SmartFlow Systems</title>
<link rel="icon" href="static-logo.png"/>
<link rel="preload" href="styles.css" as="style"/>
<link rel="stylesheet" href="styles.css"/>
</head><body>
<header class="site-header container"><a href="index.html" class="brand"><img src="static-logo.png" alt="" class="logo"/><span class="brand-name">SmartFlow</span></a>
<nav class="nav"><a href="index.html#projects">Projects</a><a href="index.html#latest">Latest</a><a href="pricing.html">Pricing</a><a href="book.html" class="btn btn-gold">Book a Call</a></nav></header>
<main id="main">
  <section class="hero container"><h1>Simple, outcome‑first pricing</h1><p class="sub">Edit <code>pricing.json</code>, refresh, done.</p></section>
  <section class="section container"><div id="pricing-cards" class="pricing-grid reveal" aria-live="polite"></div>
    <p class="muted small center">Need a custom scope? <a href="book.html">Book a free call</a>.</p></section>
</main>
<footer class="site-footer container"><small>© <span id="y"></span> SmartFlow Systems.</small><a class="link" href="index.html">Home</a></footer>
<script src="app.js" defer></script>
</body></html>

# ---------------------
# book.html
# ---------------------
<!DOCTYPE html><html lang="en"><head>
<meta charset="utf-8"/><meta name="viewport" content="width=device-width,initial-scale=1"/>
<title>Book a Call — SmartFlow Systems</title>
<link rel="icon" href="static-logo.png"/>
<link rel="preload" href="styles.css" as="style"/>
<link rel="stylesheet" href="styles.css"/>
</head><body>
<header class="site-header container"><a href="index.html" class="brand"><img src="static-logo.png" alt="" class="logo"/><span class="brand-name">SmartFlow</span></a>
<nav class="nav"><a href="index.html#projects">Projects</a><a href="index.html#latest">Latest</a><a href="pricing.html">Pricing</a><a href="book.html" class="btn btn-gold">Book a Call</a></nav></header>
<main id="main">
  <section class="hero container"><h1>Let’s map your build</h1><p class="sub">Tell us your goal. We’ll advise the fastest path and set it up.</p></section>
  <section class="section container">
    <div class="book-grid">
      <form id="lead-form" class="card" novalidate>
        <h2 class="section-title">Send your brief</h2>
        <div class="field"><label for="name">Name</label><input id="name" name="name" autocomplete="name" required/></div>
        <div class="field"><label for="email">Email</label><input id="email" name="email" type="email" autocomplete="email" required/></div>
        <div class="field"><label for="business">Business</label><input id="business" name="business" autocomplete="organization"/></div>
        <div class="field"><label for="plan">Plan</label><select id="plan" name="plan">
          <option value="">Undecided</option><option value="starter">Starter</option><option value="pro">Pro</option><option value="premium">Premium</option></select></div>
        <div class="field"><label for="goal">What outcome do you want?</label><textarea id="goal" name="goal" rows="5" placeholder="e.g. Fill Saturdays; sell 50 tees/mo; automate DMs…"></textarea></div>
        <button class="btn btn-gold btn-lg" type="submit" id="submit-btn">Send brief</button>
        <p id="form-note" class="muted small">We’ll reply within 1 business day.</p>
      </form>
      <aside class="card"><h2 class="section-title">Prefer to schedule?</h2><p>Book a free 30‑minute call.</p>
        <a id="cal-btn" class="btn btn-ghost btn-lg" href="#" target="_blank" rel="noopener">Open Calendly</a>
        <ul class="ticks"><li>Actionable steps</li><li>Clear timeline & price</li><li>No fluff</li></ul>
      </aside>
    </div>
  </section>
</main>
<footer class="site-footer container"><small>© <span id="y"></span> SmartFlow Systems.</small><a class="link" href="index.html">Home</a></footer>
<script src="app.js" defer></script>
</body></html>

# ---------------------
# styles.css  (premium + forms/pricing)
# ---------------------
:root{--bg:#0e0c0a;--fg:#ece7dd;--muted:#bcb4a7;--gold:#d4af37;--card:#181512;--accent:#231f1a;--ring:rgba(212,175,55,.45)}
*{box-sizing:border-box}html,body{margin:0;padding:0}html{scroll-behavior:smooth}
body{background:var(--bg);color:var(--fg);font:16px/1.6 ui-sans-serif,system-ui,Segoe UI,Roboto,Inter,Arial}
img{max-width:100%;display:block}a{color:inherit}.container{width:min(1200px,92%);margin-inline:auto}
.skiplink{position:absolute;left:-9999px}.skiplink:focus{left:12px;top:12px;background:#000;color:#fff;padding:8px;border-radius:6px}
.site-header{display:flex;align-items:center;justify-content:space-between;padding:16px 0;position:sticky;top:0;background:linear-gradient(180deg,rgba(14,12,10,.9),rgba(14,12,10,.6) 60%,transparent);backdrop-filter:saturate(1.1) blur(6px);z-index:10}
.brand{display:flex;gap:10px;align-items:center}.logo{height:38px;filter:drop-shadow(0 0 10px rgba(212,175,55,.12))}
.brand-name{font-weight:800;letter-spacing:.2px;opacity:.85}.nav{display:flex;gap:18px;align-items:center}
.nav a{text-decoration:none;color:var(--muted)}.nav .btn{margin-left:8px}
.nav-toggle{display:none;align-items:center;justify-content:center;width:42px;height:42px;border:1px solid #2b2722;border-radius:10px;background:#14110f}
.nav-toggle .bar{width:18px;height:2px;background:var(--fg);display:block;margin:3px 0;transition:transform .2s ease}
.hero{padding:64px 0 40px;border-bottom:1px solid #1e1a16}.hero h1{font-size:clamp(34px,5.5vw,58px);margin:0 0 12px;font-weight:900;letter-spacing:-.02em}
.hero .gold{color:var(--gold);text-shadow:0 0 18px rgba(212,175,55,.22)}.hero .sub{color:var(--muted);max-width:720px}
.hero-cta{display:flex;gap:12px;margin-top:18px;flex-wrap:wrap}.trust{opacity:.78;margin-top:10px}
.section{padding:56px 0}.section-title{font-size:clamp(22px,3.6vw,34px);margin:0 0 18px;letter-spacing:-.01em}
.projects-grid{display:grid;grid-template-columns:repeat(auto-fit,minmax(260px,1fr));gap:18px}
.project-card{position:relative;border-radius:16px;padding:18px;background:linear-gradient(180deg,var(--card),#120f0d);border:1px solid #1d1916;box-shadow:0 0 0 1px rgba(255,255,255,.02),0 10px 28px rgba(0,0,0,.36);outline:1px solid rgba(212,175,55,.10);transition:transform .14s ease,box-shadow .2s ease,outline-color .2s ease}
.project-card:hover{transform:translateY(-3px);outline-color:rgba(212,175,55,.28);box-shadow:0 0 0 1px rgba(255,255,255,.04),0 16px 36px rgba(0,0,0,.45)}
.project-card .tag{position:absolute;top:12px;right:12px;background:rgba(212,175,55,.12);border:1px solid rgba(212,175,55,.3);color:var(--gold);padding:4px 8px;border-radius:999px;font-size:.75rem}
.project-card h3{margin:8px 0 8px}.feature-list{margin:0 0 14px 18px}.feature-list li{margin:6px 0}
.actions{display:flex;gap:10px;flex-wrap:wrap}
.latest-grid{display:grid;grid-template-columns:repeat(auto-fit,minmax(260px,1fr));gap:14px}
.latest-card{background:linear-gradient(180deg,var(--card),#120f0d);border:1px solid #1d1916;border-radius:14px;padding:16px;transition:transform .12s ease}
.latest-card:hover{transform:translateY(-2px)}.latest-card h4{margin:0 0 6px}.latest-card p{margin:0;color:var(--muted)}
.latest-card a{color:var(--gold);text-decoration:none}
.pricing-cta .cta-row{display:flex;gap:12px;flex-wrap:wrap;margin-top:10px}
.btn{display:inline-flex;align-items:center;justify-content:center;border:1px solid #2b2722;border-radius:10px;padding:10px 14px;text-decoration:none;color:var(--fg);transition:transform .06s ease,box-shadow .2s ease}
.btn:focus{outline:2px solid var(--ring);outline-offset:3px}.btn:hover{transform:translateY(-1px)}
.btn-ghost{background:#14110f}
.btn-gold{background:linear-gradient(180deg,#302617,#1a160f);border-color:rgba(212,175,55,.45);box-shadow:0 0 0 1px rgba(212,175,55,.18) inset,0 8px 20px rgba(212,175,55,.08)}
.btn-gold:hover{box-shadow:0 0 0 1px rgba(212,175,55,.25) inset,0 12px 26px rgba(212,175,55,.12)}.btn-lg{padding:14px 18px;border-radius:12px}
.site-footer{display:flex;gap:16px;align-items:center;justify-content:space-between;padding:20px 0;border-top:1px solid #1e1a16}
.site-footer .link{color:var(--muted);text-decoration:none}
.reveal{opacity:0;transform:translateY(12px);transition:opacity .5s ease,transform .5s ease}.reveal.is-visible{opacity:1;transform:none}
@media (max-width:720px){.nav-toggle{display:flex}.nav{position:fixed;inset:60px 12px auto;display:none;flex-direction:column;background:#151210;border:1px solid #2a241f;border-radius:12px;padding:10px}.nav.open{display:flex}.nav a{padding:10px 8px}}
@media (max-width:520px){.logo{height:34px}}
@media (prefers-reduced-motion:reduce){html{scroll-behavior:auto}.reveal{transition:none;opacity:1;transform:none}.btn,.latest-card,.project-card{transition:none}}
/* Pricing + Book */
.muted{color:var(--muted)}.small{font-size:.9rem}.center{text-align:center}
.pricing-grid{display:grid;grid-template-columns:repeat(auto-fit,minmax(260px,1fr));gap:18px}
.price-card{background:linear-gradient(180deg,var(--card),#120f0d);border:1px solid #1d1916;border-radius:16px;padding:18px;position:relative;box-shadow:0 0 0 1px rgba(255,255,255,.02),0 10px 28px rgba(0,0,0,.36)}
.price-card .price{font-size:clamp(26px,3.5vw,36px);font-weight:800;margin:6px 0 10px}.price-card .period{font-size:.9rem;color:var(--muted)}
.price-card .features{margin:10px 0 14px 18px}.price-card.popular{outline:1px solid rgba(212,175,55,.35);box-shadow:0 0 0 1px rgba(212,175,55,.18) inset,0 16px 36px rgba(0,0,0,.45)}
.ribbon{position:absolute;top:12px;left:-8px;background:rgba(212,175,55,.12);border:1px solid rgba(212,175,55,.3);color:var(--gold);padding:4px 10px;border-radius:8px}
.card{background:linear-gradient(180deg,var(--card),#120f0d);border:1px solid #1d1916;border-radius:14px;padding:18px}
.book-grid{display:grid;grid-template-columns:1.2fr .8fr;gap:18px}@media (max-width:860px){.book-grid{grid-template-columns:1fr}}
.field{display:flex;flex-direction:column;gap:6px;margin:10px 0}
input,select,textarea{background:#14110f;border:1px solid #2b2722;border-radius:10px;color:var(--fg);padding:10px 12px;font:inherit;outline:none;transition:border-color .15s ease,box-shadow .15s ease}
input:focus,select:focus,textarea:focus{border-color:rgba(212,175,55,.45);box-shadow:0 0 0 3px rgba(212,175,55,.12)}
.ticks{margin:12px 0 0 18px}.ticks li{margin:6px 0}

# ---------------------
# app.js
# ---------------------
const t = (v) => (v ?? '').toString().replace(/[<>]/g, '');

async function getConfig(){ try{ const r=await fetch('/site.config.json',{cache:'no-store'}); return r.ok? r.json(): {}; }catch{ return {}; } }

async function getLatest(){
  const urls=['/data/posts.json','/blog/index.json','/content/index.json'];
  for (const u of urls){ try{ const r=await fetch(u,{cache:'no-store'}); if(!r.ok) continue;
    const d=await r.json(); const items=Array.isArray(d)?d:(d.posts||d.items||[]); if(items?.length) return items; }catch{} }
  return [];
}

function latestCard(item){
  const title=t(item.title||item.name||'Update'); const desc=t(item.excerpt||item.description||'');
  const href=item.url||item.link||'#'; const date=item.date?new Date(item.date).toLocaleDateString():'';
  return `<article class="latest-card"><h4><a href="${href}">${title}</a></h4><p>${desc}</p><small>${date}</small></article>`;
}

function planCard(p){
  const feats=(p.features||[]).map(f=>`<li>${t(f)}</li>`).join('');
  return `<article class="price-card ${p.popular?'popular':''}">
    ${p.popular?'<div class="ribbon" aria-hidden="true">Most Popular</div>':''}
    <header><h3>${t(p.name)}</h3><p class="muted">${t(p.subtitle||'')}</p></header>
    <div class="price">${t(p.price)} <span class="period">${t(p.period||'')}</span></div>
    <ul class="features">${feats}</ul>
    <div class="actions"><a class="btn btn-gold btn-lg" href="book.html?plan=${encodeURIComponent(p.id||'')}">Choose ${t(p.name)}</a></div>
  </article>`;
}

(async ()=>{
  const y=document.getElementById('y'); if(y) y.textContent=new Date().getFullYear();

  const toggle=document.querySelector('.nav-toggle'); const nav=document.getElementById('site-nav');
  if(toggle&&nav) toggle.addEventListener('click',()=>{ const open=nav.classList.toggle('open'); toggle.setAttribute('aria-expanded',String(open)); });

  const obs=('IntersectionObserver'in window)? new IntersectionObserver(es=>{for(const e of es) if(e.isIntersecting) e.target.classList.add('is-visible');},{threshold:.1}):null;
  document.querySelectorAll('.reveal').forEach(el=>{ if(obs) obs.observe(el); else el.classList.add('is-visible'); });

  const mount=document.getElementById('latest-cards'); if(mount){ const items=await getLatest(); mount.innerHTML=items.length?items.slice(0,3).map(latestCard).join(''):'<p class="muted">No posts yet — coming soon.</p>'; }

  const pc=document.getElementById('pricing-cards');
  if(pc){ try{ const r=await fetch('/pricing.json',{cache:'no-store'}); const d=r.ok?await r.json():{plans:[]}; pc.innerHTML=d.plans?.map(planCard).join('')||'<p class="muted">Pricing unavailable.</p>'; }catch{ pc.innerHTML='<p class="muted">Pricing unavailable.</p>'; } }

  const cfg=await getConfig(); const cal=document.getElementById('cal-btn'); if(cal) cal.href=cfg.calendlyUrl||'https://calendly.com/your-handle/30min';

  const form=document.getElementById('lead-form');
  if(form){
    const params=new URLSearchParams(location.search); const plan=params.get('plan'); if(plan) form.querySelector('#plan').value=plan;
    form.addEventListener('submit', async (e)=>{
      e.preventDefault(); const btn=document.getElementById('submit-btn'); const note=document.getElementById('form-note'); btn.disabled=true;
      const payload={name:form.name.value.trim(),email:form.email.value.trim(),business:form.business.value.trim(),plan:form.plan.value,goal:form.goal.value.trim(),page:location.href,ts:new Date().toISOString()};
      if(!payload.name || !/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(payload.email)){ note.textContent='Please enter a valid name and email.'; btn.disabled=false; return; }
      try{
        const rr=await fetch('/lead',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify(payload)});
        if(!rr.ok) throw 0;
        form.reset(); note.textContent='Thanks! We’ll reply within 1 business day.';
      }catch{ note.textContent='Could not submit right now. Please email or use Calendly.'; }
      finally{ btn.disabled=false; }
    });
  }
})();

# ---------------------
# scripts/build_posts.py
# ---------------------
#!/usr/bin/env python3
from __future__ import annotations
import json, re
from pathlib import Path
from datetime import datetime

ROOT = Path(__file__).resolve().parents[1]
OUT = ROOT / "data" / "posts.json"

def parse_md(path: Path) -> dict | None:
    text = path.read_text(encoding="utf-8", errors="ignore")
    fm = {}
    m = re.match(r"^---\s*\n(.*?)\n---\s*\n", text, flags=re.S)
    if m:
        for line in m.group(1).splitlines():
            if ":" in line:
                k, v = line.split(":", 1)
                fm[k.strip().lower()] = v.strip().strip('"\'')
        text = text[m.end():]
    title = fm.get("title") or (re.search(r"^#\s+(.+)", text, flags=re.M) or [None,None])[1]
    if not title: title = path.stem.replace("-", " ").title()
    date = fm.get("date") or (re.search(r"(\d{4}-\d{2}-\d{2})", path.name) or [None,None])[1] or datetime.fromtimestamp(path.stat().st_mtime).strftime("%Y-%m-%d")
    body = re.sub(r"\r\n", "\n", text)
    paras = [p.strip() for p in re.split(r"\n{2,}", body) if p.strip()]
    first = paras[0] if paras else ""
    excerpt = re.sub(r"[#>*_`]+", "", first); excerpt = (excerpt[:220] + "…") if len(excerpt) > 220 else excerpt
    url = f"/blog/{path.stem}.html"
    return {"title": title, "date": date, "excerpt": excerpt, "url": url}

def main():
    posts = []
    for base in (ROOT / "blog", ROOT / "content"):
        if base.exists():
            for p in sorted(base.rglob("*.md")):
                try:
                    item = parse_md(p)
                    if item: posts.append(item)
                except Exception:
                    continue
    posts.sort(key=lambda x: x.get("date",""), reverse=True)
    OUT.parent.mkdir(parents=True, exist_ok=True)
    OUT.write_text(json.dumps(posts, ensure_ascii=False, indent=2), encoding="utf-8")
    print(f"Wrote {OUT} ({len(posts)} items)")

if __name__ == "__main__":
    main()

# ---------------------
# tests/test_app.py
# ---------------------
import os, base64
import app as app_mod
from pathlib import Path

def auth_header(user="admin", pwd="testpass"):
    tok = base64.b64encode(f"{user}:{pwd}".encode()).decode()
    return {"Authorization": f"Basic {tok}"}

def setup_module(_):
    os.environ["ADMIN_USER"] = "admin"
    os.environ["ADMIN_PASSWORD"] = "testpass"

def test_health_ok():
    c = app_mod.app.test_client()
    r = c.get("/health")
    assert r.status_code == 200 and r.json["ok"] is True

def test_lead_invalid():
    c = app_mod.app.test_client()
    r = c.post("/lead", json={"name":"G","email":"bad"})
    assert r.status_code == 400

def test_admin_requires_auth():
    c = app_mod.app.test_client()
    assert c.get("/admin/leads").status_code == 401

# ---------------------
# .github/workflows/ci.yml
# ---------------------
name: CI
on: { push: { branches: [ main, master ] }, pull_request: {} }
jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with: { python-version: '3.11' }
      - run: python -m pip install --upgrade pip
      - run: pip install -r requirements.txt
      - run: pytest -q
        env: { ADMIN_USER: admin, ADMIN_PASSWORD: testpass }
      - run: python scripts/build_posts.py || true
      - uses: actions/upload-artifact@v4
        if: always()
        with: { name: posts-json, path: data/posts.json, if-no-files-found: ignore }

# ---------------------
# ONE-SHOT COMMIT (run these locally or in Replit shell)
# ---------------------
# git add -A && git commit -m "Deploy: gunicorn on $PORT, admin leads, pricing, forms" && git push origin main

# ---------------------
# REPLIT SECRETS (Deployments → Secrets)
# ---------------------
# ADMIN_USER=admin
# ADMIN_PASSWORD=supersecret
# (optional) SMTP_HOST, SMTP_PORT=587, SMTP_USER, SMTP_PASS, SMTP_TO, SMTP_FROM

# ---------------------
# VERIFY
# ---------------------
# 1) Deploy command in UI:
#    python3 -m gunicorn app:app --bind 0.0.0.0:$PORT --workers 2 --threads 4 --timeout 120
# 2) After deploy: visit /status → should show port_env=5000 and files=true
# 3) /health returns {"ok": true}
