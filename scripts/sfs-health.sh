#!/usr/bin/env bash
set -euo pipefail
echo "SFS Health $(date)"; FAIL=0; mkdir -p reports

# 0) Basics
test -d .git || { echo "❌ no git"; exit 2; }
echo "branch: $(git rev-parse --abbrev-ref HEAD)"
git remote get-url origin >/dev/null 2>&1 || { echo "❌ no origin"; FAIL=1; }

# 1) Key files/folders
for f in docs/SmartFlow-Agent-Rules.md .github/workflows; do
  [ -e "$f" ] || { echo "❌ missing $f"; FAIL=1; }
done

# 2) Conflict markers (exclude heavy/irrelevant dirs)
#    Excludes: .git, node_modules, .sfs-backups, reports, build/dist/.next/.vercel/public/assets
grep -R -n -E '<<<<<<<|>>>>>>>' . \
  --exclude-dir=.git \
  --exclude-dir=node_modules \
  --exclude-dir=.sfs-backups \
  --exclude-dir=reports \
  --exclude-dir=build \
  --exclude-dir=dist \
  --exclude-dir=.next \
  --exclude-dir=.vercel \
  --exclude-dir=public \
  > reports/conflicts.txt 2>/dev/null || true

if [ -s reports/conflicts.txt ]; then
  echo "❌ conflict markers present"; FAIL=1
else
  echo "• no conflict markers"
fi

# 3) Large files list is generated by the separate script; call it (no LFS writes)
bash scripts/sfs-large-files.sh >/dev/null 2>&1 || true

# 4) JSON sanity
for j in package.json tsconfig.json; do
  [ -f "$j" ] || continue
  python -m json.tool < "$j" >/dev/null 2>&1 || { echo "❌ bad JSON: $j"; FAIL=1; }
done

# 5) Workflows list
find .github/workflows -type f \( -name "*.yml" -o -name "*.yaml" \) | sort > reports/workflows.txt || true

# 6) Summary
{
  echo "FAIL=$FAIL"
  echo "workflows:"; cat reports/workflows.txt 2>/dev/null || true
  [ -s reports/conflicts.txt ] && echo "conflicts: see reports/conflicts.txt"
  [ -s reports/large_files.txt ] && echo "large_files: see reports/large_files.txt"
} > reports/sfs-health.txt

[ "$FAIL" -eq 0 ] && echo "✅ OK (see reports/)" || { echo "❌ ISSUES (see reports/)"; exit "$FAIL"; }
