name: SFS PR Agent
on:
  pull_request:
    types: [opened, edited, synchronize]
  issue_comment:
    types: [created]
permissions:
  pull-requests: write
  contents: read

jobs:
  run:
    if: >
      (github.event_name == 'pull_request') ||
      (github.event.issue.pull_request && contains(github.event.comment.body, '/'))
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Derive prompt
        id: prep
        run: |
          echo "actor_assoc=${{ github.event.comment.author_association || github.event.pull_request.author_association }}" >> $GITHUB_OUTPUT
          if [[ "${{ github.event_name }}" == "issue_comment" ]]; then
            BODY="${{ github.event.comment.body }}"
          else
            BODY="${{ github.event.pull_request.body }}"
          fi
          # grab first slash-command line, fallback to /dev summary if none
          LINE=$(echo "$BODY" | grep -E '^\s*/' | head -n1)
          [[ -z "$LINE" ]] && LINE="/dev Review this PR and propose concise patch notes + exact code diffs."
          # brand/system prelude
          PRELUDE="You are the SmartFlow Systems Agent. Brand: black/brown/gold. Tone: Smooth, Street-Smart, Futuristic. Keep under 1500 chars. Prefer ready-to-paste code blocks and unified SmartFlow theme."
          echo "prompt<<EOF" >> $GITHUB_OUTPUT
          echo "$PRELUDE\n\nPR TITLE: ${{ github.event.pull_request.title || github.event.issue.title }}\nREPO: ${{ github.repository }}\nCOMMAND: $LINE" >> $GITHUB_OUTPUT
          echo -e "\nPR DIFF SUMMARY (git show --name-only):" >> $GITHUB_OUTPUT
          git fetch origin ${{ github.event.pull_request.head.ref }} && \
          echo "$(git diff --name-only origin/${{ github.event.pull_request.base.ref }}...origin/${{ github.event.pull_request.head.ref }})" >> $GITHUB_OUTPUT || true
          echo "EOF" >> $GITHUB_OUTPUT

      - uses: actions/setup-node@v4
        with: { node-version: '20' }
      - run: npm i node-fetch@3

      - name: Ask SFS Agent
        id: ask
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          P: ${{ steps.prep.outputs.prompt }}
        run: |
          node -e "import fetch from 'node-fetch';
          const body={model:'gpt-4o-mini',
            messages:[{role:'system',content:'SFS PR Agent. Output concise, structured answers with code-ready blocks.'},
                      {role:'user',content:process.env.P}]};
          fetch('https://api.openai.com/v1/chat/completions',{
            method:'POST',
            headers:{'Content-Type':'application/json','Authorization':`Bearer ${process.env.OPENAI_API_KEY}`},
            body:JSON.stringify(body)
          }).then(r=>r.json()).then(j=>{console.log(j.choices[0].message.content)})" \
          | tee agent.out.md

      - name: Comment on PR
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const body = fs.readFileSync('agent.out.md','utf8');
            const pull_number = context.payload.pull_request?.number || context.payload.issue.number;
            await github.rest.issues.createComment({ 
              owner: context.repo.owner, repo: context.repo.repo, issue_number: pull_number, body 
            });
